<?php
require_once __DIR__.'/Config.php';

class GcodeGenerator {
    private $settings;
    private $modelPath;

    public function __construct($settings, $modelPath) {
        $this->settings = $settings;
        $this->modelPath = $modelPath;
    }

    public function generate() {
        // Получаем настройки материала и принтера
        $material = MATERIALS[$this->settings['material']];
        $printer = PRINTER_PROFILES['Anycubic Kobra 3'];

        // Основные параметры слайсинга
        $layerHeight = $this->settings['layer_height'];
        $infillDensity = $this->settings['infill_density'];
        $nozzleSize = $this->settings['nozzle_size'];

        // Генерация G-code
        $gcode = [];

        // Заголовок G-code
        $gcode[] = "; Generated by Anycubic Kobra 3 Web Slicer";
        $gcode[] = "; Date: " . date('Y-m-d H:i:s');
        $gcode[] = "; Model: " . basename($this->modelPath);
        $gcode[] = "; Material: " . $this->settings['material'];
        $gcode[] = "; Layer height: {$layerHeight}mm";
        $gcode[] = "; Infill: {$infillDensity}%";
        $gcode[] = "; Nozzle: {$nozzleSize}mm";

        // Стартовый G-code
        $gcode[] = "M140 S" . $material['bed_temp'][1] . " ; Set bed temp";
        $gcode[] = "M104 S" . $material['extruder_temp'][1] . " ; Set extruder temp";
        $gcode[] = "G28 ; Home all axes";
        $gcode[] = "G29 ; Auto bed leveling";
        $gcode[] = "M190 S" . $material['bed_temp'][1] . " ; Wait for bed temp";
        $gcode[] = "M109 S" . $material['extruder_temp'][1] . " ; Wait for extruder temp";
        $gcode[] = "G21 ; Set units to millimeters";
        $gcode[] = "G90 ; Use absolute positioning";
        $gcode[] = "M82 ; Set extruder to absolute mode";

        // Здесь будет реальный слайсинг модели
        // В реальном проекте подключите CuraEngine или другую библиотеку слайсинга
        $gcode[] = "; --- SLICED MODEL ---";
        $gcode[] = $this->simulateSlicing();

        // Конечный G-code
        $gcode[] = "G91 ; Relative positioning";
        $gcode[] = "G1 Z10 F900 ; Lift nozzle";
        $gcode[] = "G90 ; Absolute positioning";
        $gcode[] = "G1 X0 Y220 F9000 ; Present print";
        $gcode[] = "M104 S0 ; Turn off extruder";
        $gcode[] = "M140 S0 ; Turn off bed";
        $gcode[] = "M107 ; Turn off fan";
        $gcode[] = "M84 ; Disable steppers";

        return implode("\n", $gcode);
    }

    private function simulateSlicing() {
        // В реальном проекте замените на вызов CuraEngine или другой библиотеки
        $simulatedGcode = "";

        // Симуляция слоев
        $layers = 100 * (0.2 / $this->settings['layer_height']); // Примерное количество слоев

        for ($i = 0; $i < $layers; $i++) {
            $z = $this->settings['layer_height'] * $i;
            $simulatedGcode .= "; LAYER:$i\n";
            $simulatedGcode .= "G1 Z{$z} F3000 ; Move to layer height\n";

            // Симуляция периметров
            for ($p = 0; $p < 2; $p++) {
                $simulatedGcode .= "G1 X10 Y10 F9000\n";
                $simulatedGcode .= "G1 X190 Y10 F9000\n";
                $simulatedGcode .= "G1 X190 Y190 F9000\n";
                $simulatedGcode .= "G1 X10 Y190 F9000\n";
                $simulatedGcode .= "G1 X10 Y10 F9000\n";
            }

            // Симуляция заполнения
            if ($this->settings['infill_density'] > 0) {
                $simulatedGcode .= "; INFILL\n";
                $lines = ceil($this->settings['infill_density'] / 10);

                for ($l = 0; $l < $lines; $l++) {
                    $y = 10 + ($l * (180 / $lines));
                    $simulatedGcode .= "G1 X10 Y{$y} F9000\n";
                    $simulatedGcode .= "G1 X190 Y{$y} F9000\n";
                }
            }
        }

        return $simulatedGcode;
    }

    public function estimatePrintTime() {
        // Простая оценка времени печати
        $volume = $this->estimateModelVolume();
        $speed = 50; // мм/с
        $time = ($volume * 0.1) / ($speed * $this->settings['layer_height']);

        return round(max($time, 10)); // Минимум 10 минут
    }

    public function estimateFilamentUsed() {
        // Простая оценка расхода филамента
        $volume = $this->estimateModelVolume();
        $density = 1.25; // г/см³ (PLA)
        $filament = ($volume * $density) * ($this->settings['infill_density'] / 100);

        return round($filament, 1);
    }

    private function estimateModelVolume() {
        // В реальном проекте используйте анализ модели
        // Здесь упрощенная оценка
        $filesize = filesize($this->modelPath);
        return $filesize / 100000; // Примерная оценка объема в см³
    }
}
?>